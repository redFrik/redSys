CLASS:: RedAbstractModule
SUMMARY:: abstract class
CATEGORIES:: Red>redModule
RELATED:: Classes/RedEffectModule, Classes/RedInstrumentModule

DESCRIPTION::
WARNING::
Do not instantiate. Use its sub-subclasses.
::

CLASSMETHODS::

PRIVATE:: initClass

METHOD:: all
List of all registered modules.

SUBSECTION:: subclass responsibility

METHOD:: def
The class link::Classes/SynthDef:: according to a standard.

INSTANCEMETHODS::

PRIVATE:: initRedAbstractModule, initMethods

METHOD:: cvs
Dictionary with all link::Classes/Ref:: objects. (used to be CV objects)

METHOD:: cvsToParam
Look up SynthDef argument name.

ARGUMENT:: name
A link::Classes/Symbol::.

CODE::
a= RedEfxDist();
a.cvsToParam(\distMix);  //'mix'
a.cvsToParam(\distFreq);  //'freq'
a.free;
::

METHOD:: def
Calls link::#*def::

METHOD:: free
Remove internal controllers. Free the node and remove this module from code::RedAbstractModule.all::.

METHOD:: group
The link::Classes/Group:: if passed in when this module created - else code::nil::.

METHOD:: specs
Dictionary with all available key and link::Classes/ControlSpec:: pairs for this module.

SUBSECTION:: subclass responsibility

METHOD:: gui

EXAMPLES::

CODE::
a= RedEfxDist(0);
c= {SinOsc.ar([400, 404], 0, 0.5)}.play;
RedAbstractModule.all;
RedEffectModule.all;
RedEfxDist.all;
a.cvs;
a.distMix= 0;	//50% effect
a.out= 1;	//move stereo effect to busses 1+2
a.out= 0;	//move back to 0+1
a.distDepth= 0.1;
a.distDepth= 0.5;
a.distFreq= 20;
a.cvs;
a.specs;
a.free;
c.free;

s.plotTree;
g= Group(s);
h= Group(s);
a= RedEfxDist(0, g);
b= RedEfxVerb(0, g);
c= {SinOsc.ar([400, 404], 0, LFSaw.ar(-1).max(0)*0.5)}.play;
a.group;
b.verbMix= 0;
a.distMix= 0;
a.group= h;
a.free;
b.free;
c.free;
::
