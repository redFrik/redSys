CLASS:: RedMatrixMixer
SUMMARY:: mix any number of input and output channels
CATEGORIES:: Red>redMatrixMixer
RELATED:: Classes/RedMatrixMixerGUI, Classes/RedEffectsRack, Classes/RedMixer

DESCRIPTION::
matrix mixer

NOTE::
this class dynamically adds N unique methods for each output channel.  code::o0:: means output channel 0, code::o1:: output channel 1 etc. depending on how many outputs you have specified when creating the mixer.
::

CLASSMETHODS::

METHOD:: new

ARGUMENT:: nIn
Number of input busses.

ARGUMENT:: nOut
Number of output busses.

ARGUMENT:: in
Offset of first input bus.

ARGUMENT:: out
Offset of first out bus.

ARGUMENT:: group
if code::nil:: matrixmixer will boot the default server and creates a group after the code::defaultGroup::. if a link::Classes/Group:: then that will be used (also its server). Note that a passed in group object is not freed with calling matrixmixer's link::#-free::.

ARGUMENT:: lag
For amplitudes in seconds.

INSTANCEMETHODS::

PRIVATE:: initRedMatrixMixer

METHOD:: in
input bus offset

METHOD:: out
output bus offset

METHOD:: lag
mix lag time in seconds (linear)

METHOD:: def
Generate a link::Classes/SynthDef::.

METHOD:: free
Free all internal synths and groups (not passed in groups).

METHOD:: gui
Create a link::Classes/RedMatrixMixerGUI:: for this RedMatrixMixer.

ARGUMENT:: position
A link::Classes/Point::.

METHOD:: group
The link::Classes/Group:: in use.

METHOD:: isReady
code::true:: after the server is booted and the internal mixer is added and created.

METHOD:: nIn
Number of input audio busses.

METHOD:: nOut
Number of output audio busses.

METHOD:: synth
The mixer synth.

METHOD:: cvs
Dictionary with all link::Classes/Ref:: objects. (used to be CV objects)

METHOD:: defString
Not useful - just for show-off.

EXAMPLES::

CODE::
s.options.numOutputBusChannels= 8;
s.reboot;
s.meter;

a= RedMatrixMixer(4, 4, 0, 0);	//4 channels in, 4 channels out
(
SynthDef(\redMatrixMixerTest, {|out= 0, freq= 400, gate= 1, amp= 0.5|
	var e= EnvGen.kr(Env.asr(0.01, 1, 0.01), gate, doneAction:2);
	var z= SinOsc.ar(freq, 0, amp);
	Out.ar(out, z*e);
}).add;
)
(
b= Pbind(
	\instrument, \redMatrixMixerTest,
	\degree, Pseq([0, 1, 5, 4, 3, 4], inf),
	\dur, 0.25,
	\amp, 0.7,
	\out, Pseq([0, 1, 2, 3], inf)
).play;
)

a.gui;	//optional

a.o0= [1, 0, 0.3, 0];	//in0 to out0 with full amp, in2 to out0 with 0.3 amp
a.o1= [0, 1, 0, 0.2];	//in1 to out1 with full amp, in3 to out1 with 0.2 amp
a.in= 1;	//change to listen to input busses to 1-4

a.out= 1;	//left channel still outputs because the pbinds plays there
//and no ReplaceOut is blocking it
a.out= 0;
a.in= 0;

a.o1= [0, 0, 0, 0];
a.lag= 2;
a.o0= [0, 1, 1, 0.3];	//change mix with a 2 second lag
a.o0= [1, 0, 0, 0.2];
a.o1= [0, 0.5, 0, 0];

a.cvs	//current settings
a.defString	//current synth def as a string
a.def

a.free;
b.stop;

a= RedMatrixMixer(24, 22, 0, 0);	//14 channels in, 12 channels out
a.defString
a.free
::
