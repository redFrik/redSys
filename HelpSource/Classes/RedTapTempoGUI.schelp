CLASS:: RedTapTempoGUI
SUMMARY:: average tempo of the last n taps/clicks
CATEGORIES:: Red>redTapTempo
RELATED:: Classes/RedMixGUI

CLASSMETHODS::

METHOD:: new

ARGUMENT:: clock
Provide a link::Classes/TempoClock::. code::nil:: creates a TempoClock internally.

ARGUMENT:: n
Number of taps to average.

ARGUMENT:: timeout
Time after n counter is reset.

ARGUMENT:: server
For monitor synth. The default is code::Server.default::.

ARGUMENT:: parent
A link::Classes/Window::, link::Classes/View:: or code::nil::.

ARGUMENT:: position
A link::Classes/Point:: or code::nil::.

METHOD:: def
Return the link::Classes/SynthDef::.

INSTANCEMETHODS::

PRIVATE:: prContainer, initRedTapTempoGUI, prRoutine

METHOD:: tempo
Get or set tempo in bps.

METHOD:: monitor
A link::Classes/Boolean::. see link::#-monitorBus:: below.

METHOD:: monitorAmp
A link::Classes/Float::.

METHOD:: monitorBus
Which bus to play the click sound on.

DISCUSSION::
As the default monitor bus is 7 we need to code::s.options.numOutputBusChannels= 8;:: and then code::s.reboot:: and code::s.meter:: to see the signal.

METHOD:: clock
The link::Classes/TempoClock:: in use.

METHOD:: close
Closes the window if open and stop internal task.

METHOD:: def
Calls link::#*def::

METHOD:: parent
Return the current parent (link::Classes/Window:: or link::Classes/View::).

EXAMPLES::

CODE::
a= RedTapTempoGUI();
a.tempo;
a.tempo= 2;
a.monitor= true;
a.monitorBus= 0;
a.monitorAmp= 0.2;
a.monitor= false;
a.close;

//embedd the gui into another window
(
w= Window("hgf", Rect(100, 200, 500, 500));
w.front;
v= View(w, Rect(100, 100, 200, 200)).background_(Color.blue);
c= TempoClock(1.4);
a= RedTapTempoGUI(c, parent:v);
)
c.tempo= 2.2
::
