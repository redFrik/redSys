CLASS:: RedGIF
SUMMARY:: gif image decoder
CATEGORIES:: Red>redTools
RELATED:: Classes/RedBMP, Classes/RedGIFImage, Classes/RedGIFControl

DESCRIPTION::
Read and decodes a .gif file from disk. Includes a simple link::#-makeWindow:: method to display the pixels (but you should really write your own).

See
LIST::
## http://www33146ue.sakura.ne.jp/staff/iz/formats/gif.html
## http://paulbourke.net/dataformats/gif/
## http://www.daubnet.com/formats/GIF.html
## https://www.eecis.udel.edu/~amer/CISC651/lzw.and.gif.explained.html
::

CLASSMETHODS::

METHOD:: read
Create a RedGIF by reading and decoding a .gif file from disk. Might take some time to decode.

INSTANCEMETHODS::

PRIVATE:: prReadHeader, prReadLogicalScreenDescriptor, prDecode, prReadExtensionBlock, prReadImageDescriptor, prReadData, prRead

METHOD:: makeWindow
As simple as possible.

ARGUMENT:: bounds
A link::Classes/Rect:: that defines the position and size of the window.

ARGUMENT:: rate
A link::Classes/Float:: for changing playback rate of animated GIFs. E.g. 0.5 will play at half speed.

ARGUMENT:: interpolation
A link::Classes/Symbol:: that can be either code::\fast:: or code::\smooth::.

METHOD:: type
A string. Either "GIF87a" or "GIF89a".

METHOD:: width, height
Image dimensions in pixels.

METHOD:: background
A link::Classes/Color::. Can be code::nil:: if no link::#-globalColorMap::.

METHOD:: aspectRatio
Usually 0.

METHOD:: depth
Number of colors in the globalColorMap array (the color lookup table).

METHOD:: globalColorMap
Array of link::Classes/Color:: objects.

METHOD:: controls
Array of link::Classes/RedGIFControl:: objects. Corresponding control also saved in each link::Classes/RedGIFImage::. See below.

METHOD:: comments
Array of strings.

METHOD:: appId, appCode
Optional strings.

METHOD:: appData
Optional data as an array.

METHOD:: images
Array of link::Classes/RedGIFImage:: objects.

EXAMPLES::

CODE::
a= RedGIF.read("/Library/Application Support/Apple/iChat Icons/Funk Animals/RedDog.gif", {|gif| gif.dump});
a.dump;
a.makeWindow;

//--template for custom display code (non animating)
(
var scale= 2;
var a= RedGIF.read("/Library/Application Support/Apple/iChat Icons/Funk Animals/RedDog.gif", {win.front});
var win= Window("gif", Rect(300, 300, a.width*scale, a.height*scale), false);
var image;
win.background= Color.green;
win.drawFunc= {
	Pen.smoothing= false;
	image= a.images[0];
	image.data.do{|col, i|
		if(image.control.transparentFlag.not or:{
			image.control.transparent!=image.indices[i]
		}, {
			Pen.fillColor= col;
			Pen.fillOval(Rect(i%a.width*scale, i.div(a.width)*scale, scale, scale));
		});
	};
};
)

//--download example animated gif to desktop
"cd ~/Desktop; curl -o dog.gif https://www.animatedimages.org/data/media/202/animated-dog-image-0022.gif".unixCmd;

//--template for animation (load an animated gif)
(
var scale= 2;
var action;
var a= RedGIF.read("~/Desktop/dog.gif", {action.value});
var win= Window("gif animation", Rect(300, 300, a.width*scale, a.height*scale), false);
var image, index= 0;
var i, j, x, y, size;
var left, right, top, bottom;
win.background= Color.green;
win.drawFunc= {
	Pen.smoothing= false;
	image= a.images.wrapAt(index);
	i= 0;
	j= 0;
	left= image.bounds.left;
	right= image.bounds.width+left;
	top= image.bounds.top;
	bottom= image.bounds.height+top;
	size= a.width*a.height;
	while({i<size}, {
		x= i.mod(a.width);
		y= i.div(a.width);
		if(x>=left and:{x<right and:{y>=top and:{y<bottom}}}, {
			if(image.control.transparentFlag.not or:{
				image.indices[j]!=image.control.transparent
			}, {
				Pen.fillColor= image.data[j];
				Pen.fillRect(Rect(x*scale, y*scale, scale, scale));
			});
			j= j+1;
		});
		i= i+1;
	});
};
action= {
	if(a.images.size>1, {  //if animated gif
		Routine({
			while({win.isClosed.not}, {
				(a.images.wrapAt(index).control.duration*0.01).max(0.01).wait;
				index= index+1;
				win.refresh;
			});
		}).play(AppClock);
	});
	win.front;
};
)

//or another animation template using the Image class (faster and can resize)
(
var scale= 2;
var action;
var a= RedGIF.read("~/Desktop/dog.gif", {action.value});
var win= Window("gif animation 2", Rect(300, 300, a.width*scale, a.height*scale));
var img= Image.color(a.width, a.height);
var image, index= 0;
var i, j, x, y, size;
var left, right, top, bottom;
win.drawFunc= {
	image= a.images.wrapAt(index);
	i= 0;
	j= 0;
	left= image.bounds.left;
	right= image.bounds.width+left;
	top= image.bounds.top;
	bottom= image.bounds.height+top;
	size= a.width*a.height;
	while({i<size}, {
		x= i.mod(a.width);
		y= i.div(a.width);
		if(x>=left and:{x<right and:{y>=top and:{y<bottom}}}, {
			if(image.control.transparentFlag.not or:{
				image.indices[j]!=image.control.transparent
			}, {
				img.setColor(image.data[j], x, y);
			});
			j= j+1;
		});
		i= i+1;
	});
	Pen.drawImage(Rect(0, 0, win.bounds.width, win.bounds.height), img);
	img.fill(a.background);
};
win.onClose= {img.free};
action= {
	if(a.images.size>1, {  //if animated gif
		Routine({
			while({win.isClosed.not}, {
				(a.images.wrapAt(index).control.duration*0.01).max(0.01).wait;
				index= index+1;
				win.refresh;
			});
		}).play(AppClock);
	});
	win.front;
};
)

//NOTE: these templates are slightly simplified and will not
//display all .gif files. Look at the .makeWindow method for
//a more elaborate version.
::
