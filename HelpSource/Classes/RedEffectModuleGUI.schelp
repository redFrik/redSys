CLASS:: RedEffectModuleGUI
SUMMARY:: gui for effect modules
CATEGORIES:: Red>redModule
RELATED:: Classes/RedEffectModule, Classes/RedInstrumentModuleGUI

DESCRIPTION::
A standardized gui for link::Classes/RedEffectModule::s.

CLASSMETHODS::

METHOD:: new

ARGUMENT:: redEffectModule
A link::Classes/RedEffectModule::.

ARGUMENT:: parent
A link::Classes/Window::, link::Classes/CompositeView:: or code::nil::.

ARGUMENT:: position
A link::Classes/Point:: or code::nil::.

INSTANCEMETHODS::

PRIVATE:: prContainer, initRedEffectModuleGUI

METHOD:: close
Check if a window was created as parent and then closes it.

EXAMPLES::

CODE::
a= RedEfxVerb.new;
c= {SinOsc.ar([400, 404], 0, 0.5*Decay.kr(Dust.kr(1)))}.play;
g= RedEffectModuleGUI(a);
g.redEffectModule==a;
g.parent;
g.views;
a.verbMix= 0.5;
a.verbRoom= 0.9;
g.close;
a.free;
c.free;

a= RedEfxTape(0);
b= a.gui;
c= a.gui(nil, Point(100, 200));
a.tapeMix= 0;
a.tapeFB= 0.75
a.free;
b.close;
c.close;

//embed in a window
(
var efx= [RedEfxRing.new, RedEfxDist.new, RedEfxTank.new, RedEfxGuit.new];
var win= Window("test", Rect(100, 200, 300, 400));
win.front;
win.view.decorator= FlowLayout(win.view.bounds);
Pbind(\degree, 0).play;
efx.do{|x|
	RedEffectModuleGUI(x, win);
};
CmdPeriod.doOnce({win.close});
)

//two guis for one effect, automatically linked
(
var efx= RedEfxTank.new;
var win= Window("hgf", Rect(100, 200, 500, 500));
win.front;
v= CompositeView(win, Rect(10, 10, 400, 400));
v.background_(Color.blue);
v.decorator= FlowLayout(Rect(0, 0, 300, 300));
Pbind(\degree, 0).play;
efx.gui(v);
v.decorator.nextLine;
efx.gui(v);
CmdPeriod.doOnce({win.close});
)
::
